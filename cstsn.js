// Generated by CoffeeScript 2.0.0
(function() {
  /*
  CoffeeScript Twitch Subscription Notifier v1.0
  Released under the MIT License
  */
  var ENDOFMOTD, MAGICNICK, Notifier, PINGREGEX, SUBNOTIFY, info;

  MAGICNICK = "justinfan427138773870";

  ENDOFMOTD = /^:tmi.twitch.tv 376 /;

  PINGREGEX = /^PING :tmi.twitch.tv$/;

  SUBNOTIFY = /;display-name=(\w+);.*;msg-id=(?:re)?sub;msg-param-months=(\d+);/;

  info = function(msg) {
    return console.log(`[INFO] ${msg}`);
  };

  Notifier = class Notifier {
    constructor(channel1, subCallback) {
      this.onOpen = this.onOpen.bind(this);
      this.onMessage = this.onMessage.bind(this);
      this.onPing = this.onPing.bind(this);
      this.channel = channel1;
      this.subCallback = subCallback;
    }

    start() {
      info("Connecting...");
      this.ws = new WebSocket("ws://irc-ws.chat.twitch.tv", "irc");
      this.ws.onopen = this.onOpen;
      return this.ws.onmessage = this.onMessage;
    }

    registerUser() {
      info("Registering user...");
      return this.ws.send(`NICK ${MAGICNICK}\r\n`);
    }

    requestCaps() {
      info("Requesting extra capabilities...");
      this.ws.send("CAP REQ :twitch.tv/tags\r\n");
      return this.ws.send("CAP REQ :twitch.tv/commands\r\n");
    }

    joinChannel() {
      info(`Joining #${this.channel}...`);
      return this.ws.send(`JOIN #${this.channel}\r\n`);
    }

    onOpen(evt) {
      info("Successfully opened connection.");
      this.registerUser();
      return this.requestCaps();
    }

    onMessage(evt) {
      var data, i, len, match, message, months, ref, results;
      data = evt.data.trim();
      ref = data.split("\r\n");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        message = ref[i];
        switch (false) {
          case !PINGREGEX.test(message):
            results.push(this.onPing());
            break;
          case !ENDOFMOTD.test(message):
            results.push(this.joinChannel());
            break;
          case !/USERNOTICE/.test(message):
            match = SUBNOTIFY.exec(message);
            if (match != null) {
              months = parseInt(match[2]);
              results.push(this.subCallback(match[1], months));
            } else {
              results.push(void 0);
            }
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    }

    onPing() {
      info("Responding to PING message...");
      return this.ws.send("PONG\r\n");
    }

  };

  this.startNotifier = function(channel, callback) {
    var notifier;
    info(`Starting CoffeeScript Twitch Subscription Notifier for ${channel}`);
    notifier = new Notifier(channel, callback);
    return notifier.start();
  };

}).call(this);
